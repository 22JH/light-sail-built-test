{"version":3,"file":"static/js/624.c0c9abed.chunk.js","mappings":"8OACA,EAAuB,mCAAvB,EAAiE,mCAAjE,EAA4G,oCAA5G,EAAwJ,oCAAxJ,EAAmM,mCAAnM,EAA6O,mCAA7O,EAAoX,kCAApX,EAA2c,uC,0HCQ3c,SAASA,EAAqB,GAO1B,IANFC,EAAQ,EAARA,SACAC,EAAK,EAALA,MACAC,EAAS,EAATA,UACAC,EAAiB,EAAjBA,kBACAC,EAAgB,EAAhBA,iBACAC,EAAQ,EAARA,SAEMC,GAAYC,EAAAA,EAAAA,UAElB,GAA4BC,EAAAA,EAAAA,UAASC,MAAMP,EAAUQ,QAAQC,MAAK,IAAO,eAAlEC,EAAM,KAAEC,EAAS,KAClBC,GAAMC,EAAAA,EAAAA,MACNC,GAAaC,EAAAA,EAAAA,MAMnB,OACE,iCACE,SAAC,KAAS,CACRC,IAAKZ,EACLa,UAAU,SACVnB,SAAUA,EAASoB,OACnBC,MAAO,CACLC,IAAKC,EACLC,KAAM,CACJC,MAAO,GACPC,OAAQ,IAEVC,QAAS,CACPC,OAAQ,CACNC,EAAG,KACHC,EAAG,MAITC,QAAS,SAACC,GACR5B,GAAiB,GACjBU,EAAImB,MAAMD,EAAOE,eACjBrB,GAAU,SAACD,GAET,OADAA,EAAOX,IAAS,GACT,OAAIW,EACb,IACAT,EAAkBH,EACpB,IAEDY,EAAOX,KACN,UAAC,KAAgB,CAACD,SAAUA,EAASoB,OAAO,WAC1C,gBAAKD,UAAWgB,EAAY,UAC1B,iBAAKhB,UAAWgB,EAAY,WAC1B,iBAAKhB,UAAWgB,EAAa,UAC1BnC,EAASoC,OACV,gBACEjB,UAAWgB,EACXJ,QAAS,WACPlB,GAAU,SAACD,GAET,OADAA,EAAOX,IAAS,GACT,OAAIW,EACb,GACF,EACAwB,MAAM,qBAGV,iBAAKjB,UAAWgB,EAAY,WAC1B,gBAAKhB,UAAWgB,EAAW,UACzB,gBACEb,IAAKe,EAGLC,IAAKtC,EAASoC,WAGlB,iBAAKjB,UAAWgB,EAAY,WAC1B,4BACE,yBAAG,qCACS,KACV,iBAAMI,MAAO,CAAEC,WAAY,OAAQ,SAChCxC,EAASyC,kBAGd,yBAAG,qCACS,KACV,iBAAMF,MAAO,CAAEC,WAAY,OAAQ,SAChCxC,EAAS0C,0BAKhB,0BACE,mBAAQvB,UAAWgB,EAAiBJ,QA5ErC,WACff,EAAW,mBAAoB,CAAE2B,MAAOtC,EAASuC,YAAYxB,QAC/D,EA0EwE,SAAC,oCAO3D,SAMhB,CAEA,IAQA,GAAeyB,EAAAA,EAAAA,IAAQ,MARI,SAACC,GAC1B,MAAO,CACL3C,kBAAiB,SAAC4C,GAChBD,EAASE,EAAAA,GAAAA,kBAA0BD,GACrC,EAEJ,GAEA,EAAiDE,EAAAA,EAAAA,MAAKlD,G","sources":["webpack://bpservice-f/./src/style/EventMarkerContainer.module.css?09ff","components/kakaoMap/EventMarkerContainer.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"EventMarkerContainer_wrap__paFml\",\"info\":\"EventMarkerContainer_info__dNpcE\",\"title\":\"EventMarkerContainer_title__syxOm\",\"close\":\"EventMarkerContainer_close__6aeId\",\"body\":\"EventMarkerContainer_body__XDJBQ\",\"desc\":\"EventMarkerContainer_desc__iY4tU\",\"ellipsis\":\"EventMarkerContainer_ellipsis__xVNtH\",\"jibun\":\"EventMarkerContainer_jibun__3AjBI\",\"img\":\"EventMarkerContainer_img__Suzpp\",\"link\":\"EventMarkerContainer_link__1CGLH\",\"RoadView\":\"EventMarkerContainer_RoadView__3JoPA\"};","import { memo, useRef, useState } from \"react\";\r\nimport { MapMarker, CustomOverlayMap, useMap } from \"react-kakao-maps-sdk\";\r\nimport { connect } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { mapInfo } from \"../../modules/mapStore\";\r\nimport styled from \"../../style/EventMarkerContainer.module.css\";\r\nimport markerImg from \"../../style/umbrella.png\";\r\nimport homeIntro from \"../../style/homeIntro.png\";\r\n\r\nfunction EventMarkerContainer({\r\n  position,\r\n  index,\r\n  positions,\r\n  currentMarkerInfo,\r\n  setIsClickMarker,\r\n  mapStore,\r\n}) {\r\n  const markerRef = useRef();\r\n\r\n  const [isOpen, setIsOpen] = useState(Array(positions.length).fill(false));\r\n  const map = useMap();\r\n  const navigation = useNavigate();\r\n\r\n  const RoadView = () => {\r\n    navigation(\"/bp/map/RoadView\", { state: mapStore.currentInfo.latlng });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <MapMarker\r\n        ref={markerRef}\r\n        className=\"marker\"\r\n        position={position.latlng}\r\n        image={{\r\n          src: markerImg,\r\n          size: {\r\n            width: 64,\r\n            height: 60,\r\n          },\r\n          options: {\r\n            offset: {\r\n              x: 34.6,\r\n              y: 60,\r\n            },\r\n          },\r\n        }}\r\n        onClick={(marker) => {\r\n          setIsClickMarker(true);\r\n          map.panTo(marker.getPosition());\r\n          setIsOpen((isOpen) => {\r\n            isOpen[index] = true;\r\n            return [...isOpen];\r\n          });\r\n          currentMarkerInfo(position);\r\n        }}\r\n      />\r\n      {isOpen[index] && (\r\n        <CustomOverlayMap position={position.latlng}>\r\n          <div className={styled.wrap}>\r\n            <div className={styled.info}>\r\n              <div className={styled.title}>\r\n                {position.title}\r\n                <div\r\n                  className={styled.close}\r\n                  onClick={() => {\r\n                    setIsOpen((isOpen) => {\r\n                      isOpen[index] = false;\r\n                      return [...isOpen];\r\n                    });\r\n                  }}\r\n                  title=\"닫기\"\r\n                ></div>\r\n              </div>\r\n              <div className={styled.body}>\r\n                <div className={styled.img}>\r\n                  <img\r\n                    src={homeIntro}\r\n                    // width=\"73\"\r\n                    // height=\"40\"\r\n                    alt={position.title}\r\n                  />\r\n                </div>\r\n                <div className={styled.desc}>\r\n                  <div>\r\n                    <p>\r\n                      남은 우산 수 :{\" \"}\r\n                      <span style={{ fontWeight: \"400\" }}>\r\n                        {position.brollyCount}\r\n                      </span>\r\n                    </p>\r\n                    <p>\r\n                      전체 우산 수 :{\" \"}\r\n                      <span style={{ fontWeight: \"400\" }}>\r\n                        {position.brollyTotalCount}\r\n                      </span>\r\n                    </p>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <button className={styled.RoadView} onClick={RoadView}>\r\n                      로드뷰\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          ;\r\n        </CustomOverlayMap>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    currentMarkerInfo(info) {\r\n      dispatch(mapInfo.currentMarkerInfo(info));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(memo(EventMarkerContainer));\r\n"],"names":["EventMarkerContainer","position","index","positions","currentMarkerInfo","setIsClickMarker","mapStore","markerRef","useRef","useState","Array","length","fill","isOpen","setIsOpen","map","useMap","navigation","useNavigate","ref","className","latlng","image","src","markerImg","size","width","height","options","offset","x","y","onClick","marker","panTo","getPosition","styled","title","homeIntro","alt","style","fontWeight","brollyCount","brollyTotalCount","state","currentInfo","connect","dispatch","info","mapInfo","memo"],"sourceRoot":""}